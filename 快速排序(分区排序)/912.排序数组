class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        def quick_sort(left, right):
            # 基本情况
            if left >= right:
                return

            # 1️⃣ 随机选 pivot
            pivot_index = random.randint(left, right)
            pivot = nums[pivot_index]

            # 2️⃣ 双指针划分区间
            i, j = left, right
            while i <= j:
                # 从左边找第一个比 pivot 大的
                while nums[i] < pivot:
                    i += 1
                # 从右边找第一个比 pivot 小的
                while nums[j] > pivot:
                    j -= 1
                # 若左右指针未交叉，则交换
                if i <= j:
                    nums[i], nums[j] = nums[j], nums[i]
                    i += 1
                    j -= 1

            # 3️⃣ 递归左右区间
            quick_sort(left, j)
            quick_sort(i, right)

        quick_sort(0, len(nums) - 1)
        return nums

Hoare 方法用两个指针 i、j 从两边往中间靠。
交换时，pivot 不一定在末尾，只是保证左边都比 pivot 小，右边都比 pivot 大。
循环结束后：
左边部分范围：left → j
右边部分范围：i → right
中间 i 和 j 已经交叉。
